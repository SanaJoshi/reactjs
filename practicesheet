js file.

// funtion Adder({n1,n2}){
// const sum = n1 + n2;
// return React.createElement('h1',{},sum)
// }
//
//
// // ReactDOM.render(
// //   React.createElement('hi',{},"hello world"),
// //   document.getElementById('app'));
//
//
// ReactDOM.render(
//   React.createElement(Adder,{n1:2, n2:4}),
//   document.getElementById('app'));

ReactDOM.render(
  React.createElement(Adder,{n1:2, n2:4}),
  document.getElementById('app'));

  function Adder({n1,n2}) {
      const sum = n1 + n2;
      return (<h1>{sum}</h1>)
      // return React.createElement('h1',{},sum)
  }

  // ReactDOM.render(
  //     React.createElement(Adder, {n1:4, n2:4}),
  //     document.getElementById('app'));

ReactDOM.render(
  <Adder n1 ={2} n2={4}/>,
  document.getElementById('app')
);





const SUCCESS ='SUCCESS';
const FAILURE ='FAILURE';
const WAITING ='WAITING';
const IDLE ='IDLE'

function makeFakeRequest(){
  return new Promise((resolve, reject) => {

  setTimeOut(() => {
    if (Math.random() > 0.5){
      resove('success!')
    } else {
      reject('failed')
    }
  },3000);

});

function SaveButton ({onClick}) {
  return(
    <button className="pv2 ph3" onClick = {onClick}>
    save
    </button>
  )
}

function AlertBox({ status }) {

  if (status === FAILURE){
    return <div className="mv2">Save failed</div>;
    else if (status === SUCCESS){
      return <div className="mv2">Save successful</div>;
      else if (status === WAITING){
        return <div className="mv2">SavING</div>;
        else
        return null
      }
    }

 class SaveManager extends React.Component{
   save(event){
     event.preventDefault();
     this.setState(()=>{saveStatus: WAITING})
     this.props.savefunction(this.props.data).then(
       success=> this.setState(() => ({ saveStatus: SUCCESS}));
       failure=> this.setState(() => ({ saveStatus: FAILURE}))
     );
   }

 render (){
   return(
   <div className="mv2 flex flex-column">
   <SaveButton onClick={this.save}/>
   <AlertBox status={this}
 }


function Counter ({count}) {
	return (
		<p className="mb2">
		 word Count: {count}
		</p>
		)
  }

function ProgressBar ({ completion}) {
  const percentage = completion * 100;
  	return (
  		<div className="mv2 flex flex-column">
  		  <label htmlFor="progress" className="mv2">
  		    progress
  		  </label>
  		  <progress value={completion} id="progress" className="bn">
  		    {percentage}%
  		  </progress>
  		</div>
  		)
    }

function Editor ({text, onTextChange}) {
	function handleChange(event) {
	onTextChange(event.target.value);
 }
  return (
    <div className="flex flex-column mv2">
      <label htmlFor="editor" className="mv2">
        Enter your text
      </label>
      <textarea value={text} onChange={handleChange} id="editor"/>
    </div>
    )
  }

function countWords(text) {
	return text ? text.match(/\w+/g).length : 0
}

class WordCounter extends React.Component {
	constructor() {
		super();
		this.state = {text: ''}
		this.handleTextChange  = this.handleTextChange.bind(this);
	}

	handleTextChange(currentText) {
		// const obj = {text: currentText}
		// const func = () => {obj}
		// this.setState(fun);
		this.setState(() => {return{ text: currentText}})
	}

	render() {
		const { targetWordCount } = this.props;
		const { text } = this.state;
		const wordCount = countWords(text);
		const progress = wordCount / targetWordCount;
		return (
      <form className="measure pa4 sans-serif">
		 <Editor text={text} onTextChange={this.handleTextChange}/>
		 <Counter count={wordCount}/>
		 <ProgressBar completion={progress}/>
		</form>
			)
	}
}

// function WordCounter({text, targetWordCount}) {
// 	const wordCount = countWords(text);
// 	const progress = wordCount / targetWordCount;
// 	return (
// 		<form className="measure pa4 sans-serif">
// 		 <Editor text={text}/>
// 		 <Counter count={wordCount}/>
// 		 <ProgressBar completion={progress}/>
// 		</form>
//    )
//   }

  ReactDOM.render(
  	<WordCounter targetWordCount={10}/>,
  	document.getElementById('app'));

    var timer = setTimeout(()
